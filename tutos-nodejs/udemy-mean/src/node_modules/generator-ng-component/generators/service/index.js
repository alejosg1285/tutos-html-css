'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _yeomanGenerator = require('yeoman-generator');

var _util = require('../util');

var _scriptBase = require('../script-base.js');

var _scriptBase2 = _interopRequireDefault(_scriptBase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Generator = function (_Base) {
  _inherits(Generator, _Base);

  function Generator() {
    var _ref;

    _classCallCheck(this, Generator);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = Generator.__proto__ || Object.getPrototypeOf(Generator)).call.apply(_ref, [this].concat(args)));

    _scriptBase2.default.call(_this);
    return _this;
  }

  _createClass(Generator, [{
    key: 'prompting',
    value: function prompting() {
      var _this2 = this;

      var prompts = [{
        name: 'moduleName',
        message: 'What module name would you like to use?',
        default: this.scriptAppName + '.' + this.name,
        when: function when() {
          return _this2.config.get('modulePrompt');
        }
      }, {
        name: 'dir',
        message: 'Where would you like to create this service?',
        default: this.config.get('serviceDirectory')
      }];

      return this.prompt(prompts).then(function (props) {
        _this2.scriptAppName = props.moduleName || _this2.scriptAppName;
        _this2.route = props.route;
        _this2.dir = _path2.default.join(props.dir, _this2.name);
      });
    }
  }, {
    key: 'writing',
    value: function writing() {
      (0, _util.copyTemplates)(this, 'service');
    }
  }]);

  return Generator;
}(_yeomanGenerator.Base);

module.exports = Generator;