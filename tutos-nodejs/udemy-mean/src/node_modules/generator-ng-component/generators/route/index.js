'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _yeomanGenerator = require('yeoman-generator');

var _util = require('../util');

var _scriptBase = require('../script-base.js');

var _scriptBase2 = _interopRequireDefault(_scriptBase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Generator = function (_Base) {
  _inherits(Generator, _Base);

  function Generator() {
    _classCallCheck(this, Generator);

    return _possibleConstructorReturn(this, (Generator.__proto__ || Object.getPrototypeOf(Generator)).apply(this, arguments));
  }

  _createClass(Generator, [{
    key: 'initializing',
    value: function initializing() {
      return _scriptBase2.default.call(this);
    }
  }, {
    key: 'prompting',
    value: function prompting() {
      var _this2 = this;

      var prompts = [{
        name: 'moduleName',
        message: 'What module name would you like to use?',
        default: this.scriptAppName + '.' + this.name,
        when: function when() {
          return _this2.config.get('modulePrompt');
        }
      }, {
        name: 'dir',
        message: 'Where would you like to create this route?',
        default: this.config.get('routeDirectory')
      }, {
        name: 'route',
        message: 'What will the url of your route be?',
        default: '/' + this.name
      }];

      return this.prompt(prompts).then(function (props) {
        _this2.scriptAppName = props.moduleName || _this2.scriptAppName;
        _this2.route = props.route;
        _this2.dir = _path2.default.join(props.dir, _this2.name);
      });
    }
  }, {
    key: 'writing',
    value: function writing() {
      var basePath = this.config.get('basePath') || '';
      this.htmlUrl = (0, _util.relativeUrl)(basePath, _path2.default.join(this.dir, this.name + '.' + this.templateExt));
      (0, _util.copyTemplates)(this, 'route');
    }
  }, {
    key: 'end',
    value: function end() {
      this.log('\nIn the parent of this component, you should now import this component and add it as a dependency:\n\n    import ' + this.classedName + 'Component from \'./' + this.name + '/' + this.name + '.component\';\n    ...\n    export angular.module(\'myParentModule\', [' + this.classedName + 'Component]);');
    }
  }]);

  return Generator;
}(_yeomanGenerator.Base);

module.exports = Generator;