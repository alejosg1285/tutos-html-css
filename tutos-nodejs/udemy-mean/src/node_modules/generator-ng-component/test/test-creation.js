'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copyAsync = copyAsync;
exports.runGen = runGen;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _yeomanTest = require('yeoman-test');

var _yeomanTest2 = _interopRequireDefault(_yeomanTest);

var _yeomanAssert = require('yeoman-assert');

var _yeomanAssert2 = _interopRequireDefault(_yeomanAssert);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_bluebird2.default.promisifyAll(_fs2.default); // eslint-disable-line no-use-extend-native/no-use-extend-native

var TEST_DIR = __dirname;
var DEBUG = process.env.DEBUG || false;

/**
 * Copy file from src to dest
 * @param {string} src
 * @param {string} dest
 * @returns {Promise}
 */
function copyAsync(src, dest) {
  return _fs2.default.readFileAsync(src).then(function (data) {
    return _fs2.default.writeFileAsync(dest, data);
  });
}

/**
 * Run ng-fullstack generators
 * @param {String} genName - which generator to run
 * @param {String} name - name argument passed to generator
 * @param {object} [opts={}]
 * @param {object} [opts.prompts]
 * @param {String} [opts.config='default'] - which config file to use (default/custom)
 * @returns {Promise}
 */
function runGen(genName, name) {
  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var prompts = opts.prompts;
  var config = opts.config || 'default';

  var gen = _yeomanTest2.default.run(require.resolve('../generators/' + genName)).inTmpDir(function (dir) {
    // this will create a new temporary directory for each new generator run
    var done = this.async();
    if (DEBUG) {
      console.log('TEMP DIR: ' + dir);
    }

    // symlink our dependency directories
    return copyAsync(_path2.default.join(TEST_DIR, 'fixtures/.yo-rc.' + config + '.json'), _path2.default.join(dir, '.yo-rc.json')).then(done);
  }).withPrompts(prompts).withArguments([name]);

  return gen.toPromise();
}

describe('with default configuration', function () {
  describe('Route', function () {
    it('should generate a new route', function () {
      return runGen('route', 'foo', {
        prompts: {
          dir: 'app/components/',
          route: '/foo'
        }
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('app/components/foo', 'foo.html'), _path2.default.join('app/components/foo', 'foo.scss'), _path2.default.join('app/components/foo', 'foo.component.js'), _path2.default.join('app/components/foo', 'foo.component.spec.js'), _path2.default.join('app/components/foo', 'foo.routes.js')]);
      });
    });
  });

  describe('Directive', function () {
    it('should generate a new complex directive', function () {
      return runGen('directive', 'foo', {
        prompts: {
          dir: 'app/components/',
          complex: true
        }
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('app/components/foo', 'foo.html'), _path2.default.join('app/components/foo', 'foo.scss'), _path2.default.join('app/components/foo', 'foo.directive.js'), _path2.default.join('app/components/foo', 'foo.directive.js')]);
      });
    });

    it('should generate a new simple directive', function () {
      return runGen('directive', 'foo', {
        prompts: {
          dir: 'app/components/',
          complex: false
        }
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('app/components/foo', 'foo.directive.js'), _path2.default.join('app/components/foo', 'foo.directive.spec.js')]);
        _yeomanAssert2.default.noFile([_path2.default.join('app/components/foo', 'foo.scss'), _path2.default.join('app/components/foo', 'foo.html')]);
      });
    });
  });

  describe('Service', function () {
    it('should generate a new service', function () {
      return runGen('service', 'foo', {
        prompts: {
          dir: 'app/components/'
        }
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('app/components/foo', 'foo.service.js'), _path2.default.join('app/components/foo', 'foo.service.spec.js')]);
      });
    });
  });

  describe('Factory', function () {
    it('should generate a new factory', function () {
      return runGen('factory', 'foo', {
        prompts: {
          dir: 'app/components/'
        }
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('app/components/foo', 'foo.service.js'), _path2.default.join('app/components/foo', 'foo.service.spec.js')]);
      });
    });
  });

  describe('Filter', function () {
    it('should generate a new filter', function () {
      return runGen('filter', 'foo', {
        prompts: {
          dir: 'app/components/'
        }
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('app/components/foo', 'foo.filter.js'), _path2.default.join('app/components/foo', 'foo.filter.spec.js')]);
      });
    });
  });

  describe('Component', function () {
    it('should generate a new component', function () {
      return runGen('component', 'foo', {
        prompts: {
          dir: 'app/components/'
        }
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('app/components/foo', 'foo.component.js'), _path2.default.join('app/components/foo', 'foo.component.spec.js')]);
      });
    });
  });
});

describe('with custom configuration', function () {
  describe('Route', function () {
    it('should generate a new route', function () {
      return runGen('route', 'foo', {
        prompts: {
          dir: 'client/app/',
          route: '/foo'
        },
        config: 'custom'
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('client/app/foo', 'foo.pug'), _path2.default.join('client/app/foo', 'foo.less'), _path2.default.join('client/app/foo', 'foo.component.ts'), _path2.default.join('client/app/foo', 'foo.component.spec.ts'), _path2.default.join('client/app/foo', 'foo.routes.ts')]);
      });
    });
  });

  describe('Directive', function () {
    it('should generate a new complex directive', function () {
      return runGen('directive', 'foo', {
        prompts: {
          dir: 'client/app/',
          complex: true
        },
        config: 'custom'
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('client/app/foo', 'foo.pug'), _path2.default.join('client/app/foo', 'foo.less'), _path2.default.join('client/app/foo', 'foo.directive.ts'), _path2.default.join('client/app/foo', 'foo.directive.ts')]);
      });
    });

    it('should generate a new simple directive', function () {
      return runGen('directive', 'foo', {
        prompts: {
          dir: 'client/app/',
          complex: false
        },
        config: 'custom'
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('client/app/foo', 'foo.directive.ts'), _path2.default.join('client/app/foo', 'foo.directive.spec.ts')]);
        _yeomanAssert2.default.noFile([_path2.default.join('client/app/foo', 'foo.less'), _path2.default.join('client/app/foo', 'foo.pug')]);
      });
    });
  });

  describe('Service', function () {
    it('should generate a new service', function () {
      return runGen('service', 'foo', {
        prompts: {
          dir: 'client/app/'
        },
        config: 'custom'
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('client/app/foo', 'foo.service.ts'), _path2.default.join('client/app/foo', 'foo.service.spec.ts')]);
      });
    });
  });

  describe('Factory', function () {
    it('should generate a new factory', function () {
      return runGen('factory', 'foo', {
        prompts: {
          dir: 'client/app/'
        },
        config: 'custom'
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('client/app/foo', 'foo.service.ts'), _path2.default.join('client/app/foo', 'foo.service.spec.ts')]);
      });
    });
  });

  describe('Filter', function () {
    it('should generate a new filter', function () {
      return runGen('filter', 'foo', {
        prompts: {
          dir: 'client/app/'
        },
        config: 'custom'
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('client/app/foo', 'foo.filter.ts'), _path2.default.join('client/app/foo', 'foo.filter.spec.ts')]);
      });
    });
  });

  describe('Controller', function () {
    it('should generate a new controller', function () {
      return runGen('controller', 'foo', {
        prompts: {
          dir: 'client/app/'
        },
        config: 'custom'
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('client/app/foo', 'foo.controller.ts'), _path2.default.join('client/app/foo', 'foo.controller.spec.ts')]);
      });
    });
  });

  describe('Decorator', function () {
    it('should generate a new decorator', function () {
      return runGen('decorator', 'foo', {
        prompts: {
          dir: 'client/app/'
        },
        config: 'custom'
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('client/app/foo', 'foo.decorator.ts')]);
      });
    });
  });

  describe('Provider', function () {
    it('should generate a new provider', function () {
      return runGen('provider', 'foo', {
        prompts: {
          dir: 'client/app/'
        },
        config: 'custom'
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('client/app/foo', 'foo.service.ts'), _path2.default.join('client/app/foo', 'foo.service.spec.ts')]);
      });
    });
  });

  describe('Component', function () {
    it('should generate a new component', function () {
      return runGen('component', 'foo', {
        prompts: {
          dir: 'app/components/'
        },
        config: 'custom'
      }).then(function () {
        _yeomanAssert2.default.file([_path2.default.join('app/components/foo', 'foo.component.ts'), _path2.default.join('app/components/foo', 'foo.component.spec.ts')]);
      });
    });
  });
});